from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

def aplicar_clustering(df):
    print("üîç Aplicando clustering...")
    
    # Seleccionamos las columnas num√©ricas para el clustering
    columnas_numericas = df.select_dtypes(include=['float64', 'int64']).columns
    X = df[columnas_numericas]

    # Escalamos los datos
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    n_samples = len(df)

    # N√∫mero din√°mico de clusters: m√≠nimo 2, m√°ximo 5 o la cantidad de filas, lo que sea menor
    if n_samples < 2:
        raise ValueError("‚ùå No hay suficientes datos para aplicar clustering (m√≠nimo 2 filas).")
    n_clusters = min(5, n_samples)

    print(f"üìä N√∫mero de muestras: {n_samples} - N√∫mero de clusters usados: {n_clusters}")

    modelo = KMeans(n_clusters=n_clusters, random_state=42)
    df['cluster'] = modelo.fit_predict(X_scaled)

    return df
